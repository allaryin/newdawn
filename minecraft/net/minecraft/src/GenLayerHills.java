package net.minecraft.src;

public class GenLayerHills extends GenLayer {

  public GenLayerHills(long par1, GenLayer par3GenLayer) {
    super(par1);
    parent = par3GenLayer;
  }

  /**
   * Returns a list of integer values generated by this layer. These may be
   * interpreted as temperatures, rainfall amounts, or biomeList[] indices based
   * on the particular GenLayer subclass.
   */
  public int[] getInts(int chunkX, int chunkZ, int chunkMaxX, int chunkMaxZ) {
    int parentChunkData[] = parent.getInts(chunkX - 1, chunkZ - 1, chunkMaxX + 2, chunkMaxZ + 2);
    int myChunkData[] = IntCache.getIntCache(chunkMaxX * chunkMaxZ);

    for (int z = 0; z < chunkMaxZ; z++) {
      for (int x = 0; x < chunkMaxX; x++) {
        initChunkSeed(x + chunkX, z + chunkZ);
        int parentBiomeID = parentChunkData[x + 1 + (z + 1) * (chunkMaxX + 2)];

        if (nextInt(3) == 0) {
          int thisBiomeID = parentBiomeID;

          if (parentBiomeID == BiomeGenBase.desert.biomeID) {
            thisBiomeID = BiomeGenBase.desertHills.biomeID;
          } else if (parentBiomeID == BiomeGenBase.forest.biomeID) {
            thisBiomeID = BiomeGenBase.forestHills.biomeID;
          } else if (parentBiomeID == BiomeGenBase.taiga.biomeID) {
            thisBiomeID = BiomeGenBase.taigaHills.biomeID;
          } else if (parentBiomeID == BiomeGenBase.plains.biomeID) {
            thisBiomeID = BiomeGenBase.forest.biomeID;
          } else if (parentBiomeID == BiomeGenBase.icePlains.biomeID) {
            thisBiomeID = BiomeGenBase.iceMountains.biomeID;
          } else if (parentBiomeID == BiomeGenBase.jungle.biomeID) {
            thisBiomeID = BiomeGenBase.jungleHills.biomeID;
          }

          if (thisBiomeID != parentBiomeID) {
            int aboveID = parentChunkData[x + 1 + ((z + 1) - 1) * (chunkMaxX + 2)];
            int rightID = parentChunkData[x + 1 + 1 + (z + 1) * (chunkMaxX + 2)];
            int leftID = parentChunkData[((x + 1) - 1) + (z + 1) * (chunkMaxX + 2)];
            int belowID = parentChunkData[x + 1 + (z + 1 + 1) * (chunkMaxX + 2)];

            if (aboveID == parentBiomeID && rightID == parentBiomeID && leftID == parentBiomeID && belowID == parentBiomeID) {
              myChunkData[x + z * chunkMaxX] = thisBiomeID;
            } else {
              myChunkData[x + z * chunkMaxX] = parentBiomeID;
            }
          } else {
            myChunkData[x + z * chunkMaxX] = parentBiomeID;
          }
        } else {
          myChunkData[x + z * chunkMaxX] = parentBiomeID;
        }
      }
    }

    return myChunkData;
  }
}
